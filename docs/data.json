{
    "project": {
        "name": "Bedrock"
    },
    "files": {
        "src/utils/logger.js": {
            "name": "src/utils/logger.js",
            "modules": {},
            "classes": {
                "Logger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/BigRock.js": {
            "name": "src/BigRock.js",
            "modules": {},
            "classes": {
                "BigRock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Controller.js": {
            "name": "src/Controller.js",
            "modules": {},
            "classes": {
                "Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Model.js": {
            "name": "src/Model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Rock.js": {
            "name": "src/Rock.js",
            "modules": {},
            "classes": {
                "Rock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Router.js": {
            "name": "src/Router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/View.js": {
            "name": "src/View.js",
            "modules": {},
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/utils/logger.js",
            "line": 32,
            "description": "Bedrock logger util"
        },
        "BigRock": {
            "name": "BigRock",
            "shortname": "BigRock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/BigRock.js",
            "line": 9,
            "description": "Bedrock BigRock",
            "extends": "[Rock, Backbone.Events]",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "This"
            }
        },
        "Controller": {
            "name": "Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Controller.js",
            "line": 8,
            "description": "Bedrock Controller",
            "extends": "[BigRock]",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "This"
            }
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Model.js",
            "line": 9,
            "description": "Bedrock Model",
            "extends": "[Backbone.Model, Rock]"
        },
        "Rock": {
            "name": "Rock",
            "shortname": "Rock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Rock.js",
            "line": 9,
            "description": "Base for all Bedrock instances"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Router.js",
            "line": 11,
            "description": "Bedrock Router",
            "extends": "[Backbone.Router, Rock]"
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/View.js",
            "line": 14,
            "description": "Bedrock View",
            "extends": "[Backbone.View, Rock]"
        }
    },
    "classitems": [
        {
            "file": "src/utils/logger.js",
            "line": 38,
            "description": "Logs to wherever",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "module",
                    "description": "Module from where it came",
                    "type": "String"
                },
                {
                    "name": "msg",
                    "description": "Message to log",
                    "type": "String"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "src/utils/logger.js",
            "line": 54,
            "description": "Warns to wherever",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "module",
                    "description": "Module from where it came",
                    "type": "String"
                },
                {
                    "name": "msg",
                    "description": "Message to warn",
                    "type": "String"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "src/utils/logger.js",
            "line": 70,
            "description": "Errors to wherever",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "module",
                    "description": "Module from where it came",
                    "type": "String"
                },
                {
                    "name": "msg",
                    "description": "Message to error",
                    "type": "String"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "src/BigRock.js",
            "line": 21,
            "description": "Class name",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "BigRock"
        },
        {
            "file": "src/BigRock.js",
            "line": 28,
            "description": "Unique id for the BigRock instance",
            "type": "{String}",
            "class": "BigRock"
        },
        {
            "file": "src/BigRock.js",
            "line": 34,
            "description": "Initialize",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "BigRock"
        },
        {
            "file": "src/BigRock.js",
            "line": 44,
            "description": "Set the extend function",
            "type": "{Function}",
            "class": "BigRock"
        },
        {
            "file": "src/Controller.js",
            "line": 16,
            "description": "Class name",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 23,
            "description": "States object of the instance",
            "type": "{Object}",
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 29,
            "description": "Unique id for the instance",
            "type": "{String}",
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 37,
            "description": "Initialize",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 46,
            "description": "Returns the current state",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "The current state",
                "type": "Object"
            },
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 55,
            "description": "Checks if this is a state in this instance",
            "itemtype": "method",
            "name": "isState",
            "params": [
                {
                    "name": "state",
                    "description": "Key to check in the states",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 65,
            "description": "Sets state of the controller",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "state",
                    "description": "Key to set the state",
                    "type": "String"
                }
            ],
            "class": "Controller"
        },
        {
            "file": "src/Controller.js",
            "line": 83,
            "description": "Sets state in child",
            "itemtype": "method",
            "name": "setChildState",
            "params": [
                {
                    "name": "state",
                    "description": "Key to be set in the child",
                    "type": "String"
                }
            ],
            "class": "Controller"
        },
        {
            "file": "src/Model.js",
            "line": 16,
            "description": "Class name",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 23,
            "description": "Unique id for the instance",
            "type": "{String}",
            "class": "Model"
        },
        {
            "file": "src/Model.js",
            "line": 31,
            "description": "Bedrock model initialize",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "Model"
        },
        {
            "file": "src/Rock.js",
            "line": 15,
            "description": "Unique id for the Rock instance",
            "type": "{String}",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 21,
            "description": "Bedrock logger util module",
            "itemtype": "method",
            "name": "_logger",
            "access": "private",
            "tagname": "",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 28,
            "description": "Backbone extend function",
            "itemtype": "method",
            "name": "extend",
            "extends": "{Backbone.Model}",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 35,
            "description": "Announce to all application event",
            "itemtype": "method",
            "name": "announce",
            "params": [
                {
                    "name": "key",
                    "description": "Key to be listened by events",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Optionals a 'go' key with 'down', 'up' or 'null' and a 'data' key",
                    "type": "Object"
                }
            ],
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 55,
            "description": "Adopts the child to the router",
            "itemtype": "method",
            "name": "adopt",
            "params": [
                {
                    "name": "child",
                    "description": "Child inheriting Rock",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Child that came as parameter",
                "type": "Child"
            },
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 87,
            "description": "Unadopts the child to the router",
            "itemtype": "method",
            "name": "unadopt",
            "params": [
                {
                    "name": "child",
                    "description": "Child inheriting Rock",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Child that came as parameter",
                "type": "Child"
            },
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 113,
            "description": "Sets a parent to a child",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent inheriting Rock",
                    "type": "*"
                }
            ],
            "return": {
                "description": "This Rock instance",
                "type": "This"
            },
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 131,
            "description": "Returns the parent",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "This instance parent",
                "type": "*"
            },
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 140,
            "description": "Destroys the contorller siblings",
            "itemtype": "method",
            "name": "destroySiblings",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 159,
            "description": "Destroys the controller",
            "itemtype": "method",
            "name": "destroy",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 171,
            "description": "Make the announcement to all relatives",
            "itemtype": "method",
            "name": "_announceDown",
            "params": [
                {
                    "name": "key",
                    "description": "Key to be listened on the events",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be passed to the listeners",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 189,
            "description": "Make the announcement to all parents",
            "itemtype": "method",
            "name": "_announceUp",
            "params": [
                {
                    "name": "key",
                    "description": "Key to be listened on the events",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be passed to the listeners",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rock"
        },
        {
            "file": "src/Rock.js",
            "line": 207,
            "description": "Announce to everyone",
            "itemtype": "method",
            "name": "_announceEveryone",
            "params": [
                {
                    "name": "key",
                    "description": "Key to be listened on the events",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be passed to the listeners",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rock"
        },
        {
            "file": "src/Router.js",
            "line": 18,
            "description": "Class name",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 25,
            "description": "Unique id for the instance",
            "type": "{String}",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 31,
            "description": "The original routes set by the user with a 404 default",
            "type": "{Object}",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 39,
            "description": "Routes to be populated and used by Backbone",
            "type": "{Object}",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 45,
            "description": "Router constructor",
            "is_constructor": 1,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "Options to be passed to the Backbone router",
                    "type": "Object"
                }
            ],
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 62,
            "description": "Bedrock router initialize",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 73,
            "description": "Starts the routing",
            "itemtype": "method",
            "name": "start",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 89,
            "description": "Manages the states of the routes",
            "itemtype": "method",
            "name": "_stateManager",
            "params": [
                {
                    "name": "state",
                    "description": "State to go to",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "Route used for the state",
                    "type": "Route"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Router"
        },
        {
            "file": "src/Router.js",
            "line": 177,
            "description": "Handles the state passed",
            "itemtype": "method",
            "name": "_handleState",
            "params": [
                {
                    "name": "state",
                    "description": "State to be passed to the siblings",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Router"
        },
        {
            "file": "src/View.js",
            "line": 21,
            "description": "Class name",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "View"
        },
        {
            "file": "src/View.js",
            "line": 28,
            "description": "Unique id for the instance",
            "type": "{String}",
            "class": "View"
        },
        {
            "file": "src/View.js",
            "line": 36,
            "description": "Initialize",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "View"
        },
        {
            "file": "src/View.js",
            "line": 45,
            "description": "Render",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "data",
                    "description": "Object to be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "View"
        },
        {
            "file": "src/View.js",
            "line": 77,
            "description": "Creates a basic element for the view",
            "itemtype": "method",
            "name": "_createBasicElement",
            "return": {
                "description": "The jQuery result",
                "type": "JQuery"
            },
            "access": "private",
            "tagname": "",
            "class": "View"
        },
        {
            "file": "src/View.js",
            "line": 100,
            "description": "Removes the _ensureElement from Backbone because we want to do it in the render",
            "itemtype": "method",
            "name": "_ensureElement",
            "access": "private",
            "tagname": "",
            "class": "View"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nClass name",
            "line": " src/BigRock.js:21"
        },
        {
            "message": "Missing item type\nUnique id for the BigRock instance",
            "line": " src/BigRock.js:28"
        },
        {
            "message": "Missing item type\nSet the extend function",
            "line": " src/BigRock.js:44"
        },
        {
            "message": "Missing item type\nClass name",
            "line": " src/Controller.js:16"
        },
        {
            "message": "Missing item type\nStates object of the instance",
            "line": " src/Controller.js:23"
        },
        {
            "message": "Missing item type\nUnique id for the instance",
            "line": " src/Controller.js:29"
        },
        {
            "message": "Missing item type\nClass name",
            "line": " src/Model.js:16"
        },
        {
            "message": "Missing item type\nUnique id for the instance",
            "line": " src/Model.js:23"
        },
        {
            "message": "Missing item type\nUnique id for the Rock instance",
            "line": " src/Rock.js:15"
        },
        {
            "message": "Missing item type\nClass name",
            "line": " src/Router.js:18"
        },
        {
            "message": "Missing item type\nUnique id for the instance",
            "line": " src/Router.js:25"
        },
        {
            "message": "Missing item type\nThe original routes set by the user with a 404 default",
            "line": " src/Router.js:31"
        },
        {
            "message": "Missing item type\nRoutes to be populated and used by Backbone",
            "line": " src/Router.js:39"
        },
        {
            "message": "Missing item type\nClass name",
            "line": " src/View.js:21"
        },
        {
            "message": "Missing item type\nUnique id for the instance",
            "line": " src/View.js:28"
        }
    ]
}