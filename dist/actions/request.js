'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});


// -----------------------------------------
// Functions

/**
 * Takes care of a request
 * @param  {object} obj
 * @return {promise}
 */
var actionValidate = void 0;
var action = function action(obj) {
    actionValidate([obj]);

    var store = obj.store;
    var requestMade = obj.request;
    var actionType = obj.action;
    var middleware = obj.middleware;
    var lastStep = 'then';

    // Set loading
    store.dispatch({ type: actionType + '_LOADING', loading: true });

    // Make the request
    var promise = requestMade().then(function (data) {
        return !!middleware ? middleware(data) : data;
    }).then(function (data) {
        // Dispatch data
        store.dispatch({ type: actionType, data: data });
        return data;
    }).catch(function (err) {
        // Dispatch the error
        store.dispatch({ type: actionType + '_ERR', err: err });
    });

    // Check for the last step
    if (promise.hasOwnProperty('finally')) {
        lastStep = 'finally';
    }

    // Now set the last step
    promise[lastStep](function (data) {
        // Remove loading
        store.dispatch({ type: actionType + '_LOADING', loading: false });

        return data;
    });

    return promise;
};

// --------------------------------
// Export

exports.default = action;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL3JlcXVlc3QuanMiXSwibmFtZXMiOlsiYWN0aW9uVmFsaWRhdGUiLCJhY3Rpb24iLCJvYmoiLCJzdG9yZSIsInJlcXVlc3RNYWRlIiwicmVxdWVzdCIsImFjdGlvblR5cGUiLCJtaWRkbGV3YXJlIiwibGFzdFN0ZXAiLCJkaXNwYXRjaCIsInR5cGUiLCJsb2FkaW5nIiwicHJvbWlzZSIsInRoZW4iLCJkYXRhIiwiY2F0Y2giLCJlcnIiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFJQTtBQUNBOztBQUVBOzs7OztBQUtBLElBQU1BLHVCQUFOO0FBUUEsSUFBTUMsU0FBUyxTQUFUQSxNQUFTLENBQUNDLEdBQUQsRUFBUztBQUNwQkYsbUJBQWUsQ0FBQ0UsR0FBRCxDQUFmOztBQUVBLFFBQU1DLFFBQVFELElBQUlDLEtBQWxCO0FBQ0EsUUFBTUMsY0FBY0YsSUFBSUcsT0FBeEI7QUFDQSxRQUFNQyxhQUFhSixJQUFJRCxNQUF2QjtBQUNBLFFBQU1NLGFBQWFMLElBQUlLLFVBQXZCO0FBQ0EsUUFBSUMsV0FBVyxNQUFmOztBQUVBO0FBQ0FMLFVBQU1NLFFBQU4sQ0FBZSxFQUFFQyxNQUFTSixVQUFULGFBQUYsRUFBaUNLLFNBQVMsSUFBMUMsRUFBZjs7QUFFQTtBQUNBLFFBQU1DLFVBQVVSLGNBQ2ZTLElBRGUsQ0FDVixVQUFDQyxJQUFEO0FBQUEsZUFBVSxDQUFDLENBQUNQLFVBQUYsR0FBZUEsV0FBV08sSUFBWCxDQUFmLEdBQWtDQSxJQUE1QztBQUFBLEtBRFUsRUFFZkQsSUFGZSxDQUVWLFVBQUNDLElBQUQsRUFBVTtBQUNaO0FBQ0FYLGNBQU1NLFFBQU4sQ0FBZSxFQUFFQyxNQUFNSixVQUFSLEVBQW9CUSxVQUFwQixFQUFmO0FBQ0EsZUFBT0EsSUFBUDtBQUNILEtBTmUsRUFPZkMsS0FQZSxDQU9ULFVBQUNDLEdBQUQsRUFBUztBQUNaO0FBQ0FiLGNBQU1NLFFBQU4sQ0FBZSxFQUFFQyxNQUFTSixVQUFULFNBQUYsRUFBNkJVLFFBQTdCLEVBQWY7QUFDSCxLQVZlLENBQWhCOztBQVlBO0FBQ0EsUUFBSUosUUFBUUssY0FBUixDQUF1QixTQUF2QixDQUFKLEVBQXVDO0FBQ25DVCxtQkFBVyxTQUFYO0FBQ0g7O0FBRUQ7QUFDQUksWUFBUUosUUFBUixFQUFrQixVQUFDTSxJQUFELEVBQVU7QUFDeEI7QUFDQVgsY0FBTU0sUUFBTixDQUFlLEVBQUVDLE1BQVNKLFVBQVQsYUFBRixFQUFpQ0ssU0FBUyxLQUExQyxFQUFmOztBQUVBLGVBQU9HLElBQVA7QUFDSCxLQUxEOztBQU9BLFdBQU9GLE9BQVA7QUFDSCxDQXZDRDs7QUF5Q0E7QUFDQTs7a0JBRWVYLE0iLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgY29tcGlsZVNjaGVtYSwgZ2V0U2NoZW1hIH0gZnJvbSAnYmVkcm9jay11dGlscy9zcmMvdmFsaWRhdGUuanMnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRnVuY3Rpb25zXG5cbi8qKlxuICogVGFrZXMgY2FyZSBvZiBhIHJlcXVlc3RcbiAqIEBwYXJhbSAge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtwcm9taXNlfVxuICovXG5jb25zdCBhY3Rpb25WYWxpZGF0ZSA9IGNvbXBpbGVTY2hlbWEoZ2V0U2NoZW1hKFtcbiAgICB7IHRpdGxlOiAnb2JqJywgcHJvcGVydGllczoge1xuICAgICAgICBzdG9yZTogeyBwcm9wZXJ0aWVzOiB7fSB9LFxuICAgICAgICAvLyByZXF1ZXN0OiB7IHByb3BlcnRpZXM6IHt9IH0sXG4gICAgICAgIGFjdGlvbjogeyB0eXBlOiAnc3RyaW5nJyB9XG4gICAgICAgIC8vIG1pZGRsZXdhcmU6IHt9XG4gICAgfSB9XG5dKSk7XG5jb25zdCBhY3Rpb24gPSAob2JqKSA9PiB7XG4gICAgYWN0aW9uVmFsaWRhdGUoW29ial0pO1xuXG4gICAgY29uc3Qgc3RvcmUgPSBvYmouc3RvcmU7XG4gICAgY29uc3QgcmVxdWVzdE1hZGUgPSBvYmoucmVxdWVzdDtcbiAgICBjb25zdCBhY3Rpb25UeXBlID0gb2JqLmFjdGlvbjtcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gb2JqLm1pZGRsZXdhcmU7XG4gICAgbGV0IGxhc3RTdGVwID0gJ3RoZW4nO1xuXG4gICAgLy8gU2V0IGxvYWRpbmdcbiAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6IGAke2FjdGlvblR5cGV9X0xPQURJTkdgLCBsb2FkaW5nOiB0cnVlIH0pO1xuXG4gICAgLy8gTWFrZSB0aGUgcmVxdWVzdFxuICAgIGNvbnN0IHByb21pc2UgPSByZXF1ZXN0TWFkZSgpXG4gICAgLnRoZW4oKGRhdGEpID0+ICEhbWlkZGxld2FyZSA/IG1pZGRsZXdhcmUoZGF0YSkgOiBkYXRhKVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIC8vIERpc3BhdGNoIGRhdGFcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlLCBkYXRhIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBlcnJvclxuICAgICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6IGAke2FjdGlvblR5cGV9X0VSUmAsIGVyciB9KTtcbiAgICB9KTtcblxuICAgIC8vIENoZWNrIGZvciB0aGUgbGFzdCBzdGVwXG4gICAgaWYgKHByb21pc2UuaGFzT3duUHJvcGVydHkoJ2ZpbmFsbHknKSkge1xuICAgICAgICBsYXN0U3RlcCA9ICdmaW5hbGx5JztcbiAgICB9XG5cbiAgICAvLyBOb3cgc2V0IHRoZSBsYXN0IHN0ZXBcbiAgICBwcm9taXNlW2xhc3RTdGVwXSgoZGF0YSkgPT4ge1xuICAgICAgICAvLyBSZW1vdmUgbG9hZGluZ1xuICAgICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6IGAke2FjdGlvblR5cGV9X0xPQURJTkdgLCBsb2FkaW5nOiBmYWxzZSB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydFxuXG5leHBvcnQgZGVmYXVsdCBhY3Rpb247XG4iXX0=